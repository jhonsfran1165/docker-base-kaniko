#!/usr/bin/env bash

# Please Use Google Shell Style: https://google.github.io/styleguide/shell.xml

# ---- Start unofficial bash strict mode boilerplate
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -o errexit  # always exit on error
set -o errtrace # trap errors in functions as well
set -o pipefail # don't ignore exit codes when piping output
set -o posix    # more strict failures in subshells
# set -x          # enable debugging

IFS=$'\n\t'
# ---- End unofficial bash strict mode boilerplate

root_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$(dirname "${BASH_SOURCE[0]}")/.."

dockerfiles_to_process() {
  path=${1:-"images/"}

  shift 1 # delete first argument

  declare -a args=($@) # use for create specific dockerfiles
  if [[ ${#args[@]} -gt 0 ]]; then
    printf '%s\n' "${args[@]}"
    return
  fi
  
  # TODO: check if it's better to rebuild all or just the files changed
  # git diff-tree --no-commit-id --name-only -r HEAD^ HEAD | grep -e '/Dockerfile$'
  # TODO: git is not installed inside kaniko - leave it work with find command for now
  # git ls-files "${path}" | grep -e '/Dockerfile$'
  find "${path}" -type f | grep -e '/Dockerfile$' # get all dockerfiles from the path
}

main() {
  root_scripts_dir="${root_dir}/common-scripts"
  IMAGE_NAMESPACE=${1:-"devops-images"}

  shift 1 # delete first argument

  # little back door to add extra flwxibility to the script
  dockerfiles_to_process "$@" | {
    while read -r file_path; do

      name=$(echo "${file_path}" |  awk -F/ '{print $(NF-2)}')
      context_dir=$(dirname "${file_path}")
      tag=$(echo "${file_path}" |  awk -F/ '{print $(NF-1)}')

      # echo "name $name"
      # echo "context_dir $context_dir"
      # echo "tag $tag"

      destination="${IMAGE_NAMESPACE}/${name}:${tag}"

      # return parameters to configure a pipeline
      echo "${context_dir}*${file_path}*${destination}*${root_scripts_dir}"

    done
  }
}

main "$@"

# example of use
# buil docker-namespace path-to-docker-files optional-docker-file-path
# build devops-images images -> will look for all dockerfiles inside images folder
# build devops-images images/serverless -> will look for all docker files inside images/serverless folder
# build devops-images images images/serverless/base-cicd-1/Dockerfile -> will build only the Dockerfile given 

